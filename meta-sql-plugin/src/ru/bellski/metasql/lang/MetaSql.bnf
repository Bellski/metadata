{

 parserClass="ru.bellski.metasql.lang.parser.MetaSqlParser"
 parserUtilClass="ru.bellski.metasql.lang.parser.MetaSqlParserUtil"


    implements = "ru.bellski.metasql.lang.psi.MetaSqlElement"
    extends = "ru.bellski.metasql.lang.psi.impl.MetaSqlCompositeElementImpl"

    psiClassPrefix="MetaSql"

    psiImplClassSuffix="Impl"

    psiPackage="ru.bellski.metasql.lang.psi"

    psiImplPackage="ru.bellski.metasql.lang.psi.impl"

    elementTypeHolderClass="ru.bellski.metasql.lang.psi.MetaSqlTypes"
    elementTypeClass="ru.bellski.metasql.lang.psi.MetaSqlElementType"
    tokenTypeClass="ru.bellski.metasql.lang.psi.MetaSqlTokenType"

 tokens=[
     ANY='any';
     SEMI=';'
     EQ='='

     METADATA="Metadata"
     RETURNRULE="ReturnRule"

     LIST="List"
     BOOLEAN="Boolean"
     INTEGER="Integer"
     SINGLE="Single"

     M_IDENTIFIER="m_identifier"
   ]

}

root ::= metaSqlBody

metaSqlBody ::= group?
{mixin="ru.bellski.metasql.lang.psi.impl.MetaSqlBodyImpl" implements="ru.bellski.metasql.lang.psi.MetaSqlBody"}

private group ::= returnRuleClause  metadataClause? {recoverWhile=metaSqlBody_recovery}
private metaSqlBody_recovery::= !('ReturnRule' | 'Metadata' | 'm_identifier')

returnRuleClause ::= 'ReturnRule' '=' returnRuleValue {pin=1 mixin="ru.bellski.metasql.lang.psi.impl.ReturnRuleClauseImpl" implements="ru.bellski.metasql.lang.psi.ReturnRuleClause" recoverWhile=r}
private r ::= !('ReturnRule' '=' | 'Metadata' | 'any' | 'm_identifier')

returnRuleValue ::= 'List' | 'Boolean' | 'Integer' | 'Single'
{mixin="ru.bellski.metasql.lang.psi.impl.ReturnRuleValueImpl" implements="ru.bellski.metasql.lang.psi.ReturnRuleValue"}


metadataClause ::= 'Metadata' '=' metadataReference
{pin=1 mixin="ru.bellski.metasql.lang.psi.impl.MetadataClauseImpl" implements="ru.bellski.metasql.lang.psi.MetadataClause"}

metadataReference ::= 'm_identifier'
{mixin="ru.bellski.metasql.lang.psi.impl.MetadataReferenceImpl" implements="ru.bellski.metasql.lang.psi.MetadataReference"}

















