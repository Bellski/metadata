{
    parserClass="ru.bellski.metasql.lang.parser.MetaSqlParser"

    implements = "ru.bellski.metasql.lang.psi.MetaSqlCompositeElement"
    extends = "ru.bellski.metasql.lang.psi.impl.MetaSqlCompositeElementImpl"

    psiClassPrefix="MetaSql"
    psiImplClassSuffix="Impl"

    psiPackage="ru.bellski.metasql.lang.psi"
    psiImplPackage="ru.bellski.metasql.lang.psi.impl"

    elementTypeHolderClass="ru.bellski.metasql.lang.psi.MetaSqlTokenTypes"
    elementTypePrefix=""
    elementTypeClass="ru.bellski.metasql.lang.psi.MetaSqlElementType"
    tokenTypeClass="ru.bellski.metasql.lang.psi.MetaSqlTokenType"

    psiImplUtilClass="ru.bellski.metasql.lang.psi.impl.MetaSqlPsiImplUtil"

    tokens = [
        LBRACE="{"
        RBRACE="}"
        LBRACKET="["
        RBRACKET="]"
        SEMICOLON=";"
        LT="<"
        RT=">"
        EQ="="
        COMMA=","
        DOT="."

        LIST="List"
        Boolean="Boolean"
        String="String"
        Long="Long"

        IMPORT_KEYWORD="import"
        METADATA_KEYWORD="sqlMetadata"
        PARAMETERS_KEYWORD="parameters"
        RETURN_KEYWORD="return"

        WHITE_SPACE='regexp:\s+'

        PACKAGE_KEYWORD="package"

        META_QUERY_KEYWORD="metaQuery"
        IDENTIFIER='regexp:\w+'
        STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"

        LINE_COMMENT="regexp://.*"
    ]

}

metaSqlFile ::= root

root ::= packageDefinition? metaQueryDefinition {recoverWhile=metaSql_recovery methods=[getMetaQueryName getPackageName getImportNames getParametersCount getParameters getReturnStatement]}
private metaSql_recovery ::= !('package')

packageDefinition ::= 'package' packageName ';' {pin=2}
packageName ::= (IDENTIFIER (('.' IDENTIFIER)*)?) {methods=[getName]}

metaQueryDefinition ::= 'metaQuery' IDENTIFIER? queryBody {pin=2}

private queryBody ::= '{' queryMembers '}'
private queryMembers ::= metadataDefinition? parametersDefinition? returnStatement? {recoverWhile=queryMembers_recovery}
private queryMembers_recovery ::= !'}'

metadataDefinition ::= 'sqlMetadata' '=' metadata ';' {pin=3}

parametersDefinition ::= 'parameters' '=' '[' (parameterDefinition  ((',' parameterDefinition)*)?) ']' ';' {pin=4}

parameterDefinition ::= literalType  IDENTIFIER {pin=2 methods=[getName]}

returnStatement ::= 'return' typeReference ';' {pin=2}


typeReference ::= literalType | listTypeReference referenceParameter

listTypeReference ::= 'List'
{mixin="ru.bellski.metasql.lang.psi.impl.MetaSqlJavaReferenceImpl" implements="ru.bellski.metasql.lang.psi.MetaSqlJavaReference" methods=[getTypeName]}

referenceParameter ::= '<' (literalType | metadata) '>' {pin=2}


literalType ::= literalTypeList
{mixin="ru.bellski.metasql.lang.psi.impl.MetaSqlJavaReferenceImpl" implements="ru.bellski.metasql.lang.psi.MetaSqlJavaReference" methods=[getTypeName]}

private literalTypeList ::= 'String' | 'Boolean' | 'Long'

metadata ::= (IDENTIFIER (('.' IDENTIFIER)*)?)
{mixin="ru.bellski.metasql.lang.psi.impl.MetaSqlMetadataReferenceElementImpl" implements="ru.bellski.metasql.lang.psi.MetaSqlMetadataReferenceElement" methods=[getName]}



