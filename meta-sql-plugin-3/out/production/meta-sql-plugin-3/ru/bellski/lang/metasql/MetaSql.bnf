{
    psiImplUtilClass="ru.bellski.lang.metasql.util.MetaSqlPsiImplUtil"

    parserClass="ru.bellski.lang.metasql.MetaSqlParser"
    parserUtilClass="ru.bellski.lang.metasql.psi.impl.MetaSqlGeneratedParserUtilBase"

    implements="ru.bellski.lang.metasql.psi.MetaSqlPsiCompositeElement"
    extends="ru.bellski.lang.metasql.psi.impl.MetaSqlPsiCompositeElementImpl"

    psiClassPrefix="MetaSql"
    psiImplClassSuffix="Impl"
    psiPackage="ru.bellski.lang.metasql.psi"
    psiImplPackage="ru.bellski.lang.metasql.psi.impl"

    elementTypeHolderClass="ru.bellski.lang.metasql.MetaSqlTokenTypes"
    elementTypePrefix=""
    elementTypeClass="ru.bellski.lang.metasql.MetaSqlElementType"
    tokenTypeClass="ru.bellski.lang.metasql.MetaSqlElementType"

    tokens = [
        DOT = '.'
        SEMICOLON = ';'
        COLON = ':'
        LBRACE = '{'
        RBRACE = '}'
        LBRACKET="["
        RBRACKET="]"

        LT = '<'
        GT = '>'
        EQ = '='
        COMMA = ','

        IMPORT = 'import'
        METAQUERY = 'metaQuery'
        SQLMETADATA = 'sqlMetadata'
        PARAMETERS = 'parameters'
        RETURN = 'return'
        PACKAGE = 'package'

        SPACE='regexp:\s+'
        LINE_COMMENT='regexp://.*'
        IDENTIFIER = 'regexp:\p{Alpha}\w*'
        LITERAL="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    ]

    mixin(".*ReferenceElement")="ru.bellski.lang.metasql.psi.impl.MetaSqlPsiReferenceImpl"
    implements(".*ReferenceElement")="ru.bellski.lang.metasql.psi.MetaSqlPsiReference"
}

metaSqlFile ::= packageStatement? importList metaQuery?

packageStatement::= 'package' packageReferenceElement ';' {pin=3}
packageReferenceElement ::= (IDENTIFIER (('.' IDENTIFIER)*)?)

importList ::= importStatement*

/* IMPORT */

importStatement ::= 'import' importReferenceElement ';'  {pin=3}


importReferenceElement ::= (IDENTIFIER (('.' IDENTIFIER)*)?)

metaQuery ::= 'metaQuery' IDENTIFIER? '{' (metadataAssign? parametersAssign? returnStatement?)'}' {pin=1}

metadataAssign ::= 'sqlMetadata' '=' typeElement ';'

parametersAssign ::= 'parameters' '=' '[' (parameterVariable ((',' parameterVariable)*)?) ']' ';'
parameterVariable ::= typeElement IDENTIFIER

returnStatement ::= 'return' typeElement ';'

typeElement ::= codeReferenceElement

codeReferenceElement ::= IDENTIFIER referenceParameterList
referenceParameterList ::= ('<' typeElement '>')?






